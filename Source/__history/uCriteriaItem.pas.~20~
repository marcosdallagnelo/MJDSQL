unit uCriteriaItem;

interface

uses System.Rtti, System.Generics.Collections;

type
  TMJDCompareOperator = (coEqual, coGreaterThan, coLowerThan, coGreaterOrEqual,
    coLowerOrEqual, coNotEqual, coLike);
  TMJDLogicRelation = (lrAnd, lrOr);

  IMJDCriteriaItem = interface;

  IMJDCriteriaItem = interface(IInterface)
    ['{3329869B-79A1-4194-95B1-DEE40696EE80}']
    procedure SetAttribute(const Value: string);
    procedure SetCompareOperator(const Value: TMJDCompareOperator);
    procedure SetValue(const Value: TValue);
    procedure SetLogicRelation(const Value: TMJDLogicRelation);
    function GetLogicRelation: TMJDLogicRelation;
    function GetCompareOperator: TMJDCompareOperator;
    function GetValue: TValue;
    function GetAttribute: String;
  end;

  IMJDCriteria = interface(IMJDCriteriaItem)
    ['{3329869B-79A1-4194-95B1-DEE40696EE80}']
    procedure Clear;
    function _Or(Criteria: IMJDCriteria): IMJDCriteria; overload;
    function _And(Criteria: IMJDCriteria): IMJDCriteria; overload;
    function _Or(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue)
      : IMJDCriteria; overload;
    function _And(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue)
      : IMJDCriteria; overload;
    function Count: Integer;
    function GetCriteria(const index: Integer): IMJDCriteria;
  end;

  TMJDCriteria = class(TInterfacedObject, IMJDCriteria)
  private
    FAttribute: String;
    FLogicRelation: TMJDCompareOperator;
    FValue: TValue;
    FCompareOperator: TMJDCompareOperator;
    FItems: TList<IMJDCriteria>;
    function Add(Criteria: IMJDCriteria; LogicRelation: TMJDCompareOperator)
      : IMJDCriteria; overload;
    function Add(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue;
      LogicRelation: TMJDLogicRelation = lrAnd): IMJDCriteria; overload;
  public
    constructor Create; overload; virtual;
    constructor Create(const Attribute: string; CompareOperator: TMJDCompareOperator;
      Value: TValue); overload; virtual;
    constructor Create(Criteria: IMJDCriteria); overload; virtual;
    destructor Destroy; override;
    { ICriteria }
    procedure Clear;
    function _Or(Criteria: IMJDCriteria): IMJDCriteria; overload;
    function _And(Criteria: IMJDCriteria): IMJDCriteria; overload;
    function _Or(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue)
      : IMJDCriteria; overload;
    function _And(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue)
      : IMJDCriteria; overload;
    function Count: Integer;
    function GetCriteria(const index: Integer): IMJDCriteria;
    class function NewCriteria(const Attribute: string; CompareOperator: TMJDCompareOperator;
      Value: TValue): IMJDCriteria; overload;
    class function NewCriteria(Criteria: IMJDCriteria): IMJDCriteria; overload;
    { ICriteriaItem }
    procedure SetAttribute(const Value: string);
    procedure SetCompareOperator(const Value: TMJDCompareOperator);
    procedure SetValue(const Value: TValue);
    procedure SetLogicRelation(const Value: TMJDLogicRelation);
    function GetLogicRelation: TMJDLogicRelation;
    function GetCompareOperator: TMJDCompareOperator;
    function GetValue: TValue;
    function GetAttribute: string;
  end;

  TMJDCriteriaItem = class(TCriteria, ICriteria, ICriteriaItem)
  private
    FCompareOperator: TdormCompareOperator;
    FAttribute: string;
    FValue: TValue;
    FLogicRelation: TdormLogicRelation;
  protected
    procedure SetAttribute(const Value: string);
    procedure SetCompareOperator(const Value: TdormCompareOperator);
    procedure SetValue(const Value: TValue);
    procedure SetLogicRelation(const Value: TdormLogicRelation);
    function GetLogicRelation: TdormLogicRelation;
    function GetAttribute: string;
    function GetCompareOperator: TdormCompareOperator;
    function GetValue: TValue;
  public
    constructor Create(const Attribute: string; CompareOperator: TdormCompareOperator;
      Value: TValue); override;
    property Attribute: string read FAttribute write SetAttribute;
    property CompareOperator: TdormCompareOperator read FCompareOperator
      write SetCompareOperator;
    property Value: TValue read FValue write SetValue;
    property LogicRelation: TdormLogicRelation read FLogicRelation
      write SetLogicRelation;
  end;

implementation

//function TCriteriaItem.ToString: string;
//begin
//  Result := 'AND(campo1 = ''1'')';
//end;

{ TMJDCriteria }

function TMJDCriteria.Add(const Attribute: string;
  CompareOperator: TMJDCompareOperator; Value: TValue;
  LogicRelation: TMJDLogicRelation): IMJDCriteria;
begin

end;

function TMJDCriteria.Add(Criteria: IMJDCriteria;
  LogicRelation: TMJDCompareOperator): IMJDCriteria;
begin

end;

procedure TMJDCriteria.Clear;
begin

end;

function TMJDCriteria.Count: Integer;
begin

end;

constructor TMJDCriteria.Create(Criteria: IMJDCriteria);
begin

end;

constructor TMJDCriteria.Create(const Attribute: string;
  CompareOperator: TMJDCompareOperator; Value: TValue);
begin

end;

constructor TMJDCriteria.Create;
begin

end;

destructor TMJDCriteria.Destroy;
begin

  inherited;
end;

function TMJDCriteria.GetAttribute: string;
begin

end;

function TMJDCriteria.GetCompareOperator: TMJDCompareOperator;
begin

end;

function TMJDCriteria.GetCriteria(const index: Integer): IMJDCriteria;
begin

end;

function TMJDCriteria.GetLogicRelation: TMJDLogicRelation;
begin

end;

function TMJDCriteria.GetValue: TValue;
begin

end;

class function TMJDCriteria.NewCriteria(Criteria: IMJDCriteria): IMJDCriteria;
begin

end;

class function TMJDCriteria.NewCriteria(const Attribute: string;
  CompareOperator: TMJDCompareOperator; Value: TValue): IMJDCriteria;
begin

end;

procedure TMJDCriteria.SetAttribute(const Value: string);
begin

end;

procedure TMJDCriteria.SetCompareOperator(const Value: TMJDCompareOperator);
begin

end;

procedure TMJDCriteria.SetLogicRelation(const Value: TMJDLogicRelation);
begin

end;

procedure TMJDCriteria.SetValue(const Value: TValue);
begin

end;

function TMJDCriteria._And(Criteria: IMJDCriteria): IMJDCriteria;
begin

end;

function TMJDCriteria._And(const Attribute: string;
  CompareOperator: TMJDCompareOperator; Value: TValue): IMJDCriteria;
begin

end;

function TMJDCriteria._Or(Criteria: IMJDCriteria): IMJDCriteria;
begin

end;

function TMJDCriteria._Or(const Attribute: string;
  CompareOperator: TMJDCompareOperator; Value: TValue): IMJDCriteria;
begin

end;

end.
