unit uCriteriaItem;

interface

uses System.Rtti, System.Generics.Collections;

type
   TMJDCompareOperator = (coEqual, coGreaterThan, coLowerThan, coGreaterOrEqual,
    coLowerOrEqual, coNotEqual, coLike);
  TScLogicRelation = (lrAnd, lrOr);

  ICriteriaItem = interface;

  ICriteriaItem = interface(IInterface)
    ['{3329869B-79A1-4194-95B1-DEE40696EE80}']
    procedure SetAttribute(const Value: string);
    procedure SetCompareOperator(const Value: TMJDCompareOperator);
    procedure SetValue(const Value: TValue);
    procedure SetLogicRelation(const Value: TScLogicRelation);
    function GetLogicRelation: TScLogicRelation;
    function GetCompareOperator: TMJDCompareOperator;
    function GetValue: TValue;
    function GetAttribute: String;
  end;

  ICriteria = interface(ICriteriaItem)
    ['{3329869B-79A1-4194-95B1-DEE40696EE80}']
    procedure Clear;
    function _Or(Criteria: ICriteria): ICriteria; overload;
    function _And(Criteria: ICriteria): ICriteria; overload;
    function _Or(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue)
      : ICriteria; overload;
    function _And(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue)
      : ICriteria; overload;
    function Count: Integer;
    function GetCriteria(const index: Integer): ICriteria;
  end;

  TMJDCriteria = class(TInterfacedObject, ICriteria)
  private
    FAttribute: String;
    FLogicRelation: TMJDCompareOperator;
    FValue: TValue;
    FCompareOperator: TMJDCompareOperator;
    FItems: TList<ICriteria>;
    function Add(Criteria: ICriteria; LogicRelation: TMJDCompareOperator)
      : ICriteria; overload;
    function Add(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue;
      LogicRelation: TScLogicRelation = lrAnd): ICriteria; overload;
  public
    constructor Create; overload; virtual;
    constructor Create(const Attribute: string; CompareOperator: TMJDCompareOperator;
      Value: TValue); overload; virtual;
    constructor Create(Criteria: ICriteria); overload; virtual;
    destructor Destroy; override;
    { ICriteria }
    procedure Clear;
    function _Or(Criteria: ICriteria): ICriteria; overload;
    function _And(Criteria: ICriteria): ICriteria; overload;
    function _Or(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue)
      : ICriteria; overload;
    function _And(const Attribute: string; CompareOperator: TMJDCompareOperator; Value: TValue)
      : ICriteria; overload;
    function Count: Integer;
    function GetCriteria(const index: Integer): ICriteria;
    class function NewCriteria(const Attribute: string; CompareOperator: TMJDCompareOperator;
      Value: TValue): ICriteria; overload;
    class function NewCriteria(Criteria: ICriteria): ICriteria; overload;
    { ICriteriaItem }
    procedure SetAttribute(const Value: string);
    procedure SetCompareOperator(const Value: TMJDCompareOperator);
    procedure SetValue(const Value: TValue);
    procedure SetLogicRelation(const Value: TMJDCompareOperator);
    function GetLogicRelation: TMJDCompareOperator;
    function GetCompareOperator: TMJDCompareOperator;
    function GetValue: TValue;
    function GetAttribute: string;
  end;

implementation

//function TCriteriaItem.ToString: string;
//begin
//  Result := 'AND(campo1 = ''1'')';
//end;

end.
